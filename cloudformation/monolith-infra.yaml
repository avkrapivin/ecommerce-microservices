AWSTemplateFormatVersion: '2010-09-09'
Description: E-commerce monolith infrastructure (EC2 + RDS + S3 + SQS + Cognito)

Parameters:
  KeyName:
    Description: SSH key for EC2 access
    Type: AWS::EC2::KeyPair::KeyName

Resources:

  # S3 bucket for file storage
  ProductImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: onlineshop-product-images
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 Bucket Policy
  ProductImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProductImagesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Sub "${ProductImagesBucket.Arn}/*"
            Condition:
              StringLikeIfExists:
                s3:ObjectContentType: "image/*"

  # SQS queue for order status updates
  OrderStatusUpdateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderStatusUpdateQueue
      # Reliability settings
      VisibilityTimeout: 60      # 1 minute for message processing
      MessageRetentionPeriod: 1209600   # 14 days message retention
      ReceiveMessageWaitTimeSeconds: 20 # Long polling for efficiency
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OrderStatusUpdateDLQ.Arn
        maxReceiveCount: 3              # 3 processing attempts before sending to DLQ

  # Dead Letter Queue for problematic messages
  OrderStatusUpdateDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderStatusUpdateDLQ
      MessageRetentionPeriod: 1209600   # 14 days retention in DLQ

  # CloudWatch Alarm for DLQ
  DLQMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: OrderStatusUpdateDLQ-Messages
      AlarmDescription: "Alert when messages appear in OrderStatusUpdate DLQ"
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt OrderStatusUpdateDLQ.QueueName
      AlarmActions:
        - !Ref DLQAlertTopic

  # SNS Topic for DLQ alerts
  DLQAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderStatusUpdateDLQ-Alerts
      DisplayName: "DLQ Alert Topic"

  # Security Group for Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Security Group for Application
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/8  # Only from private network

  # Security Group for Database
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup

  # Secrets Manager for DB password
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${AWS::StackName}-db-credentials"
      Description: "Database credentials for ecommerce application"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "ecommerce_user"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # EC2 instance for monolith
  MonolithInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2 (replace with current regional ami)
      SecurityGroupIds:
        - !Ref ApplicationSecurityGroup
      IamInstanceProfile: !Ref MonolithInstanceProfile
      Tags:
        - Key: Name
          Value: ecommerce-monolith
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y java-17-amazon-corretto-headless
          # Install CloudWatch agent
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm

  # RDS PostgreSQL
  MonolithDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: ecommerce-monolith-db
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: "15.8"
      ManageMasterUserPassword: true
      MasterUserSecret:
        SecretArn: !Ref DatabaseSecret
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      PubliclyAccessible: false  # Security: only from private network
      BackupRetentionPeriod: 7   # 7 days backups
      MultiAZ: false             # Set to true for production
      StorageType: gp3
      StorageEncrypted: true     # Storage encryption

  # IAM role for EC2 (access to S3, SQS, Secrets Manager)
  MonolithInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: MonolithS3SqsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "${ProductImagesBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref ProductImagesBucket
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                Resource: 
                  - !GetAtt OrderStatusUpdateQueue.Arn
                  - !GetAtt OrderStatusUpdateDLQ.Arn
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecommerce/*'
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:Subscribe
                Resource: 
                  - !Ref OrderUnconfirmedTopic
                  - !Ref OrderStatusUpdatedTopic
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DatabaseSecret
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  MonolithInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MonolithInstanceRole

  # SNS topic for unconfirmed order events
  OrderUnconfirmedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderUnconfirmed

  # SNS topic for order status updates
  OrderStatusUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderStatusUpdated

  # SNS subscription of SQS queue to OrderStatusUpdated topic
  OrderStatusUpdatedSqsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref OrderStatusUpdatedTopic
      Protocol: sqs
      Endpoint: !GetAtt OrderStatusUpdateQueue.Arn
      # Enable raw message delivery for simpler processing
      RawMessageDelivery: true
      FilterPolicy: |
        {
          "Subject": ["OrderStatusUpdated"]
        }

  # Access policy for SNS to SQS queue
  OrderStatusUpdateQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt OrderStatusUpdateQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref OrderStatusUpdatedTopic
      Queues:
        - !Ref OrderStatusUpdateQueue

  # Save SNS topic ARN in Parameter Store
  OrderUnconfirmedTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /ecommerce/sns/order-unconfirmed-topic-arn
      Type: String
      Value: !Ref OrderUnconfirmedTopic
      Description: SNS topic ARN for unconfirmed orders

  # Save SNS topic OrderStatusUpdated ARN in Parameter Store
  OrderStatusUpdatedTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /ecommerce/sns/order-status-updated-topic-arn
      Type: String
      Value: !Ref OrderStatusUpdatedTopic
      Description: SNS topic ARN for order status updates

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: onlineshop-user-pool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: given_name
          Required: true
          Mutable: true
        - Name: family_name
          Required: true
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ecommerce-app
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_AUTH
      CallbackURLs:
        - http://localhost:8080/api/auth/callback
      SupportedIdentityProviders:
        - COGNITO

  # Cognito User Pool Domain
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: 16egwzyxgo
      UserPoolId: !Ref CognitoUserPool

  # Cognito User Group (admin)
  CognitoAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admin
      UserPoolId: !Ref CognitoUserPool
      Description: Admin group for onlineshop users

Outputs:
  MonolithInstancePublicIp:
    Description: Monolith public IP
    Value: !GetAtt MonolithInstance.PublicIp
  ProductImagesBucketName:
    Description: S3 bucket name for images
    Value: !Ref ProductImagesBucket
  OrderStatusUpdateQueueUrl:
    Description: SQS queue URL for order status updates
    Value: !Ref OrderStatusUpdateQueue
  OrderStatusUpdateQueueArn:
    Description: SQS queue ARN for order status updates
    Value: !GetAtt OrderStatusUpdateQueue.Arn
  OrderStatusUpdateDLQUrl:
    Description: DLQ URL for problematic messages
    Value: !Ref OrderStatusUpdateDLQ
  OrderStatusUpdateDLQArn:
    Description: DLQ ARN for problematic messages
    Value: !GetAtt OrderStatusUpdateDLQ.Arn
  MonolithDBEndpoint:
    Description: Database endpoint
    Value: !GetAtt MonolithDB.Endpoint.Address
  OrderUnconfirmedTopicArn:
    Description: OrderUnconfirmed SNS topic ARN
    Value: !Ref OrderUnconfirmedTopic
  OrderStatusUpdatedTopicArn:
    Description: OrderStatusUpdated SNS topic ARN
    Value: !Ref OrderStatusUpdatedTopic
  CognitoUserPoolId:
    Description: ID of the created Cognito User Pool
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: ID of the created Cognito App Client
    Value: !Ref CognitoUserPoolClient
  CognitoDomain:
    Description: Cognito Domain URL
    Value: !Sub "https://${CognitoUserPoolDomain.Domain}.auth.${AWS::Region}.amazoncognito.com" 