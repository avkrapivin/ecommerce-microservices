AWSTemplateFormatVersion: '2010-09-09'
Description: Инфраструктура монолита e-commerce (EC2 + RDS + S3 + SQS + Cognito)

Parameters:
  KeyName:
    Description: SSH ключ для доступа к EC2
    Type: AWS::EC2::KeyPair::KeyName

Resources:

  # S3 bucket для хранения файлов
  ProductImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: onlineshop-product-images
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 Bucket Policy
  ProductImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProductImagesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Sub "${ProductImagesBucket.Arn}/*"
            Condition:
              StringLikeIfExists:
                s3:ObjectContentType: "image/*"

  # SQS очередь для обновления статуса заказа
  OrderStatusUpdateQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderStatusUpdateQueue

  # Security Group для EC2
  MonolithSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Доступ к монолиту и БД
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # Для теста, потом ограничить!
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0 # Для теста, потом ограничить!
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref MonolithSecurityGroup

  # EC2 instance для монолита
  MonolithInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2 (замени на актуальный региональный ami)
      SecurityGroupIds:
        - !Ref MonolithSecurityGroup
      IamInstanceProfile: !Ref MonolithInstanceProfile
      Tags:
        - Key: Name
          Value: ecommerce-monolith

  # RDS PostgreSQL
  MonolithDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: ecommerce-monolith-db
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: "15.3"
      MasterUsername: admin
      MasterUserPassword: adminpassword # Лучше использовать SecretsManager!
      VPCSecurityGroups:
        - !Ref MonolithSecurityGroup
      PubliclyAccessible: true # Для теста, потом убрать

  # IAM роль для EC2 (доступ к S3 и SQS)
  MonolithInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: MonolithS3SqsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub "${ProductImagesBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecommerce/*'
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:Subscribe
                  - sns:Receive
                Resource: 
                  - !Ref OrderUnconfirmedTopic
                  - !Ref OrderStatusUpdatedTopic

  MonolithInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MonolithInstanceRole

  # SNS топик для событий неподтверждённого заказа
  OrderUnconfirmedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderUnconfirmed

  # SNS топик для обновлений статуса заказа
  OrderStatusUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderStatusUpdated

  # SNS подписка монолита на топик OrderStatusUpdated
  OrderStatusUpdatedSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref OrderStatusUpdatedTopic
      Protocol: https
      Endpoint: !Sub "https://${MonolithInstance.PublicIp}:8080/api/delivery/webhook"
      FilterPolicy: |
        {
          "Subject": ["OrderStatusUpdated"]
        }

  # Сохраняем ARN SNS топика в Parameter Store
  OrderUnconfirmedTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /ecommerce/sns/order-unconfirmed-topic-arn
      Type: String
      Value: !Ref OrderUnconfirmedTopic
      Description: ARN SNS топика для неподтверждённых заказов

  # Сохраняем ARN SNS топика OrderStatusUpdated в Parameter Store
  OrderStatusUpdatedTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /ecommerce/sns/order-status-updated-topic-arn
      Type: String
      Value: !Ref OrderStatusUpdatedTopic
      Description: ARN SNS топика для обновлений статуса заказа

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: onlineshop-user-pool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: given_name
          Required: true
          Mutable: true
        - Name: family_name
          Required: true
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ecommerce-app
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_AUTH
      CallbackURLs:
        - http://localhost:8080/api/auth/callback
      SupportedIdentityProviders:
        - COGNITO

  # Cognito User Pool Domain
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: 16egwzyxgo
      UserPoolId: !Ref CognitoUserPool

  # Cognito User Group (admin)
  CognitoAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: admin
      UserPoolId: !Ref CognitoUserPool
      Description: Admin group for onlineshop users

Outputs:
  MonolithInstancePublicIp:
    Description: Public IP монолита
    Value: !GetAtt MonolithInstance.PublicIp
  ProductImagesBucketName:
    Description: Имя S3 бакета для изображений
    Value: !Ref ProductImagesBucket
  OrderStatusUpdateQueueUrl:
    Description: URL SQS очереди для обновления статуса заказа
    Value: !Ref OrderStatusUpdateQueue
  MonolithDBEndpoint:
    Description: Endpoint базы данных
    Value: !GetAtt MonolithDB.Endpoint.Address
  OrderUnconfirmedTopicArn:
    Description: ARN SNS топика OrderUnconfirmed
    Value: !Ref OrderUnconfirmedTopic
  OrderStatusUpdatedTopicArn:
    Description: ARN SNS топика OrderStatusUpdated
    Value: !Ref OrderStatusUpdatedTopic
  CognitoUserPoolId:
    Description: ID of the created Cognito User Pool
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: ID of the created Cognito App Client
    Value: !Ref CognitoUserPoolClient
  CognitoDomain:
    Description: Cognito Domain URL
    Value: !Sub "https://${CognitoUserPoolDomain.Domain}.auth.${AWS::Region}.amazoncognito.com" 